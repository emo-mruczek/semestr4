sprawdzenie certyfikatu: komenda

openssl s_client -showcerts -connect www.pwr.edu.pl:443
openssl s_client -showcerts -connect stackexchange.com:443 < /dev/null

albo kliknąć na kłódkę -> more information -> view certificate

root certificate: public key certificate that identifies a root certificate authority (CA); it is self-signed and form of a basis X.509-based public key infrastructure

certificate authority can issue multiple certificates in the form of a tree structure. A root certificate is the top-most certificate of the tree, the private key which is used to "sign" other certificates. All certificates signed by the root certificate, with the "CA" field set to true, inherit the trustworthiness of the root certificate

plik .pem ( is a text-based container using base-64 encoding).
certy
x.509 - standard definiujacy format certyfikatu klucza publicznego

Certyfikat klucza publicznego zawiera trzy podstawowe informacje:

    klucz publiczny podmiotu,
    opis tożsamości podmiotu[3],
    podpis cyfrowy złożony przez zaufaną trzecią stronę na dwóch powyższych strukturach.

Certyfikat klucza publicznego realizuje przede wszystkim funkcję autentyczności w stosunku do klucza publicznego podmiotu. Autentyczny klucz może być następnie używany do realizacji kolejnych funkcji bezpieczeństwa.

> wydawca openssl x509 -in pwr-edu-pl.pem -issuer
> algorytm podpisu  openssl x509 -in pwr-edu-pl.pem -text | grep "Algorithm"
> data waznosci podpisu  openssl x509 -in pwr-edu-pl.pem -endddate
> dla kogo  openssl x509 -in pwr-edu-pl.pem -subject
> domeny openssl x509 -in pwr-edu-pl.pem -text | grep -A 1 "Alternative"
> rozszerzenia openssl x509 -in pwr-edu-pl.pem -text | grep -A 1 "X509"
> crl openssl x509 -in pwr-edu-pl.pem -text | grep -A 2 "CRL"
> oscp openssl x509 -in pwr-edu-pl.pem -text | grep -A 2 "Authority"
        openssl x509 -in server-cert.pem -noout -ocsp_uri online certificate status protocol/ unifotm resource identifier


certyfikaty sa zapisane tez w /etc/ssl/certs/ca-certificates.crt

openssl verify -CAfile ca-certificates.crt -untrusted stackoverflow-com-chain.pem stackoverflow-com.pem
openssl verify -CAfile ca-certificates.crt -untrusted pwr-edu-pl-chain.pem pwr-edu-pl.pem

openssl ocsp -issuer pwr-edu-pl-chain.pem -cert pwr-edu-pl.pem -text -url http://GEANT.ocsp.sectigo.com

generowanie kluczy:
openssl genrsa -out keypair.pem 2048 -> numer to dlugosc klucza w bitach
openssl rsa -in keypair.pem -pubout -out publickey.crt -> wyciagam klucz publiczny

generowanie csr cetificate signing request
openssl req -new -key keypair.pem -out domain.csr

 sudo certbot certonly --csr domain.csr --staging --manual
 sudo certbot certonly --manual -d https://nabezpieke.pages.dev/ --csr domain.csr

 pojawia sie challenge np:

 Create a file containing just this data:

de3W8RURDIh9h3rv2Nm41wOxgHMvIBpDqcnBBBZE6d0.y1D3KHe-4xVNrCOzpcGy-4KaXI9tdbC5u-bZ55H_XjU

And make it available on your web server at this URL:

http://nabezpieke.freedynamicdns.net/.well-known/acme-challenge/de3W8RURDIh9h3rv2Nm41wOxgHMvIBpDqcnBBBZE6d0

git clone git@github.com:WebGoat/WebGoat.git
./mvnw clean install
./mvnw spring-boot:run
http://localhost:8080/WebGoat 


7. <script>alert()</script> 
10. debugger->view>goatrouter.js start.mvc#test/
11. nowa karta, wzrucic http://localhost:8080/WebGoat/start.mvc?username=zielnik#test/<script>webgoat.customjs.phoneHome()<%2Fscript>.
12. 4 3 1 2 4

3.  test <script>webgoat.customjs.phoneHome()</script>


5. <%@ taglib uri="https://www.owasp.org/index.php/OWASP_Java_Encoder_Project" %>
<html>
<head>
    <title>Using GET and POST Method to Read Form Data</title>
</head>
<body>
    <h1>Using POST Method to Read Form Data</h1>
    <table>
        <tbody>
            <tr>
                <td><b>First Name:</b></td>
                <td>${e:forHtml(param.first_name)}</td>
            </tr>
            <tr>
                <td><b>Last Name:</b></td>
                <td>${e:forHtml(param.last_name)}</td>
            </tr>
        </tbody>
    </table>
</body>
</html>


6.import org.owasp.validator.html.*;
import MyCommentDAO;

public class AntiSamyController {
    public void saveNewComment(int threadID, int userID, String newComment){
        Policy p = Policy.getInstance("antisamy-slashdot.xml");  
         AntiSamy as = new AntiSamy();  
         CleanResults cr = as.scan(newComment, p, AntiSamy.DOM);  
         MyCommentDAO.addComment(threadID, userID, cr.getCleanHTML());
    }
}
